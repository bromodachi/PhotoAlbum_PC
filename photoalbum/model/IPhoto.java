package model;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

/**
 * @author Mark Labrador
 * This is the basic unit of content in the application.
 */
public interface IPhoto extends Serializable{
	/*
	 * Required
	 */

	/**
	 * @return Identifier associated with the photo.  This is normally a separate and unique 
	 * identifier from filename associated with the photo.
	 */
	public String getPhotoID();
	
	/**
	 * @param id Identifier to be associated the photo.  This is normally a separate and 
	 * unique identifier from filename associated with the photo.
	 */
	public void setPhotoID(String id);
	
	/*
	 * Getters and Setters
	 */
	/**
	 * @return Gets photos file name.
	 */
	public String getFileName();
	
	/**
	 * @param fileName File name of photo; given by the user.
	 */
	public void setFileName(String fileName);
	/**
	 * @return Caption associated with the photo.
	 */
	public String getCaption();
	
	/**
	 * @param caption Caption to be associated with the photo.  This is given by the user.
	 */
	public void setCaption(String caption);
	
	/**
	 * @return Date associated with the photo.  This is generated by the application.
	 */
	public Date getDate();
	
	/**
	 * @param date Date to be associated with the photo.  This is generated by the application.  
	 * The milliseconds have been set to zero e.g. cal.set(Calendar.MILLISECOND,0);
	 */
	public void setDate(Date date);
	
	/*
	 * Tags
	 */
	/**
	 * Injective tagging retrieval is necessary for tags associated with only one value 
	 * (1-1 relationship).  This is for properties such as location -> <location>, 
	 * where only one value can occur.
	 * 
	 * @param tagType Tag previously added for this 1-1 association.
	 * @return Single value associated with the tag.
	 */
	public <V> V getTagInjective(String tagType);
	
	/**
	 * Injective tagging association is necessary for tags to be associated with only one value 
	 * (1-1 relationship).
	 * 
	 * @param tagType Tag to be added in an 1-1 association.
	 * @param value Single value to be associated with the tag.
	 */
	public <V> void setTagInjective(String tagType, V value);
	
	/**
	 * Surjective tagging retrieval is necessary for tags associated with multiple values 
	 * (one-to-many relationship).  This is for properties such as people -> <List-Of-People>
	 * 
	 * @param tagType Tag previously added for this one-to-many association.
	 * @return Multiple values associated with the tag.
	 */
	public <V> List<V> getTagSurjective(String tagType);
	
	/**
	 * Surjective tagging association is necessary for tags to be associated with multiple values 
	 * (one-to-many relationship).
	 * 
	 * @param tagType, Tag to be added in an one-to-many association.
	 * @param value Multiple values to be associated with this tag.
	 */
	public <V> void setTagSurjective(String tagType, List<V> value);
	
	/*
	 * Attributes
	 */
	/**
	 * @param attributeId Identifier of the attribute to be associated with the photo.
	 * @param setting Specific attribute setting to be associated with the photo.
	 */
	public void setAttribute(String attributeId, String setting);
}
